/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Form;

import Class.CurrentUser;
import Class.Worker;
import DAO.QuanLyWorker;
import DAO.WorkerDAO;
import connect.DatabaseConnection;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.table.TableModel;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Date;
import java.text.SimpleDateFormat;
import org.apache.xmlbeans.impl.regex.ParseException;

/**
 *
 * @author vuqua
 */
public class FormQuanLyWorker extends javax.swing.JFrame {

    /**
     * Creates new form FormQuanLy
     */
    private void loadDataToForm() {
    try {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Mã Công Nhân");
        model.addColumn("Tên Công Nhân");
        model.addColumn("Đơn Vị");
        model.addColumn("Ngày Làm");
        model.addColumn("Checkin");
        model.addColumn("Checkout");
        model.addColumn("Thời Gian Làm");
        model.addColumn("ID Ca");

        // Lấy danh sách Worker từ CSDL
       // Trong một lớp khác, ví dụ WorkerForm
        QuanLyWorker quanLyWorker = new QuanLyWorker();
        List<Worker> workers = quanLyWorker.getAllWorkers();


        // Thêm dữ liệu từ danh sách Worker vào model
        for (Worker worker : workers) {
            String tenCa = getTenCa(worker.getIdCa()); // Lấy tên ca từ ID
            Object[] row = {
                worker.getMaCongNhan(),
                worker.getTenCongNhan(),
                worker.getDonVi(),
                worker.getNgayLam(),
                worker.getCheckIn(),
                worker.getCheckOut(),
                worker.getThoiGianLam(),
                tenCa // Sử dụng tên ca thay vì IDCa
            };
            model.addRow(row);
        }

        // Set model cho table
        jTable1.setModel(model);

    }catch(Exception ex) {
        ex.printStackTrace();
        // Xử lý lỗi nếu cần
    }
}
    public FormQuanLyWorker() {
        initComponents();
        loadDataToForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txt_donvi = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_tongsogiolam = new javax.swing.JTextField();
        txt_tongsogiolamthem = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tendonvi = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        txt_donvi.setText("Nhập đơn vị");
        txt_donvi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_donviActionPerformed(evt);
            }
        });

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Export Excel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Import Excel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Tổng số giờ làm");

        jLabel2.setText("Tổng số giờ làm thêm");

        txt_tongsogiolam.setEnabled(false);

        txt_tongsogiolamthem.setEnabled(false);

        jLabel3.setText("Đơn vị:");

        tendonvi.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tendonvi.setForeground(new java.awt.Color(204, 0, 0));
        tendonvi.setCaretColor(new java.awt.Color(204, 0, 0));
        tendonvi.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(98, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(tendonvi))
                    .addComponent(jLabel1)
                    .addComponent(txt_tongsogiolam, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txt_tongsogiolamthem, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_donvi)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tendonvi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(1, 1, 1)
                        .addComponent(txt_tongsogiolam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_tongsogiolamthem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(5, 5, 5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addGap(9, 9, 9))
                    .addComponent(txt_donvi, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(1, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_donviActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_donviActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_donviActionPerformed

     private String formatTotalThoiGianLam(long totalSeconds) {
    long hours = totalSeconds / 3600;
    long minutes = (totalSeconds % 3600) / 60;
    long seconds = totalSeconds % 60;

    return String.format("%02d:%02d:%02d", hours, minutes, seconds);
}
    private String getTenCa(int idCa) {
    switch (idCa) {
        case 1:
            return "Ca1";
        case 2:
            return "Ca2";
        case 3:
            return "Ca3";
        default:
            return "Không xác định";
    }
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String donVi = txt_donvi.getText();
         try {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Mã Công Nhân");
        model.addColumn("Tên Công Nhân");
        model.addColumn("Đơn Vị");
        model.addColumn("Ngày Làm");
        model.addColumn("Checkin");
        model.addColumn("Checkout");
        model.addColumn("Thời Gian Làm");
        model.addColumn("Tên Ca");

        // Lấy danh sách Worker từ CSDL
       // Trong một lớp khác, ví dụ WorkerForm
        QuanLyWorker quanLyWorker = new QuanLyWorker();
        List<Worker> workers = quanLyWorker.getWorkersByDonVi(donVi);

        int totalThoiGianLam = 0;
        int totalThoiGianTangCa = 0;

        
        // Thêm dữ liệu từ danh sách Worker vào model
        // Thêm dữ liệu từ danh sách Worker vào model
for (Worker worker : workers) {
    String tenCa = getTenCa(worker.getIdCa()); // Lấy tên ca từ ID
    Object[] row = {
        worker.getMaCongNhan(),
        worker.getTenCongNhan(),
        worker.getDonVi(),
        worker.getNgayLam(),
        worker.getCheckIn(),
        worker.getCheckOut(),
        worker.getThoiGianLam(),
        tenCa // Sử dụng tên ca thay vì IDCa
    };

    if (worker.getThoiGianLam() != null) { // Kiểm tra giá trị không phải null trước khi thực hiện toLocalTime()
        if (worker.getIdCa() == 1 || worker.getIdCa() == 2) {
            totalThoiGianLam += worker.getThoiGianLam().toLocalTime().toSecondOfDay();
        }
        if (worker.getIdCa() == 3) {
            totalThoiGianTangCa += worker.getThoiGianLam().toLocalTime().toSecondOfDay();
        }
    }

    model.addRow(row);
}


        tendonvi.setText(txt_donvi.getText());
        txt_tongsogiolamthem.setText(formatTotalThoiGianLam(totalThoiGianTangCa));
        txt_tongsogiolam.setText(formatTotalThoiGianLam(totalThoiGianLam));
        
        // Set model cho table
        jTable1.setModel(model);

    }catch(Exception ex) {
        ex.printStackTrace();
        // Xử lý lỗi nếu cần
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private static void exportToExcel(JTable table) {
        try {
            XSSFWorkbook workbook = new XSSFWorkbook(); // Use XSSFWorkbook for XLSX format
            Sheet sheet = workbook.createSheet("Sheet1");

            // Get the table model
            TableModel model = table.getModel();

            // Create header row
            Row headerRow = sheet.createRow(0);
            for (int i = 0; i < model.getColumnCount(); i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(model.getColumnName(i));
            }

            // Create data rows
            for (int r = 0; r < model.getRowCount(); r++) {
                Row row = sheet.createRow(r + 1);
                for (int c = 0; c < model.getColumnCount(); c++) {
                    Cell cell = row.createCell(c);
                    Object value = model.getValueAt(r, c);
                    if (value != null) {
                        if (value instanceof Number) {
                            cell.setCellValue(((Number) value).doubleValue());
                        } else if (value instanceof Boolean) {
                            cell.setCellValue((Boolean) value);
                        } else {
                            cell.setCellValue(value.toString());
                        }
                    }
                }
            }

            // Create a temporary file
            File tempFile = File.createTempFile("exported_data", ".xlsx");

            // Save the workbook to the temporary file
            try (FileOutputStream fileOut = new FileOutputStream(tempFile)) {
                workbook.write(fileOut);
                System.out.println("Data exported successfully!");
            }

            workbook.close();

            // Open the file using the default application associated with .xlsx files
            Desktop.getDesktop().open(tempFile);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        exportToExcel(jTable1);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            // Người dùng đã chọn một tệp
            File selectedFile = fileChooser.getSelectedFile();

            // Gọi hàm import với đối tượng File đã chọn
            importWorkersFromExcel(selectedFile);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    
    public void importWorkersFromExcel(File excelFile) {
    try (Connection connection = DatabaseConnection.connect()) {
        FileInputStream fis = new FileInputStream(excelFile);
        XSSFWorkbook workbook = new XSSFWorkbook(fis);

        // Assuming the first sheet is the one you want to read
        int sheetIndex = 0;
        org.apache.poi.ss.usermodel.Sheet sheet = workbook.getSheetAt(sheetIndex);

        // Loop through rows
        for (Row row : sheet) {
            if (row.getRowNum() == 0) {
                // Skip the header row
                continue;
            }

            Worker worker = createWorkerFromRow(row);
            System.out.println(row);

            String query = "INSERT INTO Worker (macongnhan, tencongnhan, donvi, ngaylam, checkin, checkout, thoigianlam, idca, password) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, worker.getMaCongNhan());
                preparedStatement.setString(2, worker.getTenCongNhan());
                preparedStatement.setString(3, worker.getDonVi());
                preparedStatement.setDate(4, worker.getNgayLam());
                preparedStatement.setTime(5, worker.getCheckIn());
                preparedStatement.setTime(6, worker.getCheckOut());
                preparedStatement.setTime(7, worker.getThoiGianLam());
                preparedStatement.setInt(8, worker.getIdCa());
                preparedStatement.setString(9, worker.getPassWord());
                preparedStatement.executeUpdate();
            }
        }

        workbook.close();
        fis.close();

        // Hiển thị popup import thành công
        JOptionPane.showMessageDialog(null, "Import thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);

        loadDataToForm();
    } catch (Exception e) {
        e.printStackTrace();
        // Handle exceptions if necessary
    }
}

    private Worker createWorkerFromRow(Row row) {
        
        Worker worker = new Worker();
        worker.setMaCongNhan(getStringCellValue(row.getCell(0)));
        worker.setTenCongNhan(getStringCellValue(row.getCell(1)));
        worker.setDonVi(getStringCellValue(row.getCell(2)));
        worker.setNgayLam(getDateCellValue(row.getCell(3)));
        worker.setCheckIn(getTimeCellValue(row.getCell(4)));
        worker.setCheckOut(getTimeCellValue(row.getCell(5)));
        worker.setThoiGianLam(getTimeCellValue(row.getCell(6)));
        worker.setIdCa(getIntCellValue(row.getCell(7)));
        worker.setPassWord(getStringCellValue(row.getCell(8)));

        return worker;
    }

   

    private String getStringCellValue(Cell cell) {
        return cell == null ? null : cell.toString();
    }

    

    private java.sql.Date getDateCellValue(Cell cell) {
    if (cell == null) {
        return null;
    }
    try {
        // Giá trị số ngày trong Excel
        double excelDateValue = cell.getNumericCellValue();
        
        // Chuyển đổi sang kiểu Date
        java.util.Date javaDate = org.apache.poi.ss.usermodel.DateUtil.getJavaDate(excelDateValue);
        
        // Chuyển đổi sang java.sql.Date
        return new java.sql.Date(javaDate.getTime());
    } catch (IllegalArgumentException e) {
        // Xử lý nếu giá trị không hợp lệ
        return null;
    }
}


private java.sql.Time getTimeCellValue(Cell cell) {
    if (cell == null) {
        return null;
    }
    try {
        // Giá trị số giờ trong Excel
        double excelTimeValue = cell.getNumericCellValue();
        
        // Chuyển đổi sang kiểu Date
        java.util.Date javaDateTime = org.apache.poi.ss.usermodel.DateUtil.getJavaDate(excelTimeValue);
        
        // Chuyển đổi sang java.sql.Timestamp
        java.sql.Timestamp timestamp = new java.sql.Timestamp(javaDateTime.getTime());
        
        // Lấy giờ từ Timestamp
        return new java.sql.Time(timestamp.getTime());
    } catch (IllegalArgumentException e) {
        // Xử lý nếu giá trị không hợp lệ
        e.printStackTrace();
        return null;
    }
}





    private int getIntCellValue(Cell cell) {
        return cell == null ? 0 : (int) cell.getNumericCellValue();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormQuanLyWorker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormQuanLyWorker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormQuanLyWorker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormQuanLyWorker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormQuanLyWorker().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tendonvi;
    private javax.swing.JTextField txt_donvi;
    private javax.swing.JTextField txt_tongsogiolam;
    private javax.swing.JTextField txt_tongsogiolamthem;
    // End of variables declaration//GEN-END:variables
}
